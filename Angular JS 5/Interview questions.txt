WHAT IS MVC Pattern?

1. Why use AngularJS?
Ans: AngularJS is a structural framework for dynamic web apps. With AngularJS, designers can use HTML as the template language and it        allows for the extension of HTML's syntax to convey the application's components effortlessly. Angular makes much of the code you        would otherwise have to write completely redundant.

2. What are the advantages of using AngularJS?
Ans: The main Angular advantages over its closest rival, KnockoutJS, are: No need to use observable functions; Angular analyses the page      DOM and builds the bindings based on the Angular-specific element attributes. ... Angular modifies the page DOM directly instead of      adding inner HTML code. That is faster.

3. What is difference between node JS and AngularJS?
Ans: AngularJS is a client-side JavaScript MVC framework to develop a dynamic web application. ... Node.js is an open source, cross-          platform runtime environment for developing server-side and networking applications built on Google Chrome's JavaScript Engine (V8      Engine).

4. How does angular work?
Ans: When AngularJS starts your application, it parses and processes this new markup from the template using the compiler. The loaded,        transformed and rendered DOM is then called the view. The first kind of new markup are the directives. They apply special behavior      to attributes or elements in the HTML.

5. Why angular is better than jquery?
Ans: Angular and jQuery can't reasonably be compared. Angular is a framework, jQuery is a library. Frameworks have their place and            libraries have their place. However, there is no question that a good framework has more power in writing an application than a          library.

6. What is MVC in angular?
Ans: AngularJS - MVC Architecture. Advertisements. Model View Controller or MVC as it is popularly called, is a software design pattern      for developing web applications. A Model View Controller pattern is made up of the following three parts − Model − It is the lowest      level of the pattern responsible for maintaining data.

7. What is a node NPM?
Ans: npm , short for Node Package Manager, is two things: first and foremost, it is an online repository for the publishing of open-          source Node.js projects; second, it is a command-line utility for interacting with said repository that aids in package                  installation, version management, and dependency management.

8. What is a DOM in Angularjs?
Ans: AngularJS DOM. « Previous. Next » DOM stands for Document Object Model. AngularJS's directives are used to bind application data to      the attributes of HTML DOM elements.

9. What is difference between angular js and Javascript?
Ans: AJAX is a way for JavaScript to request data from a server without refreshing the page or blocking the application. jQuery is a          JavaScript library built to automate and simplify common web tasks like AJAX or animation. Angular is a hip JavaScript framework        which is made for building large, single-page web applications.

10. What is the scope of Angular JS?
Ans: AngularJS Scope. ❮ Previous Next ❯ The scope is the binding part between the HTML (view) and the JavaScript (controller). The scope      is an object with the available properties and methods. The scope is available for both the view and the controller.

11. What is typescript?
Ans: TypeScript is a free and open-source programming language developed and maintained by Microsoft. It is a strict syntactical              superset of JavaScript, and adds optional static typing to the language. Anders Hejlsberg, lead architect of C# and creator of          Delphi and Turbo Pascal, has worked on the development of TypeScript.
     [Typescript = ES5+SE6+Some Advance Features+Classes. It is superset of Javascript.]

12. What are the difference between angular js 2, 4 and 5?
Ans: http://www.codekul.com/blog/difference-between-angular-2-4-5/

13. What is node? or What is Node.js?
Ans:
    Node.js is an open source server framework
    Node.js is free
    Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
    Node.js uses JavaScript on the server
    Node.js uses asynchronous programming!
    Node.js can generate dynamic page content
    Node.js can create, open, read, write, delete, and close files on the server
    Node.js can collect form data
    Node.js can add, delete, modify data in your database
    Node.js files contain tasks that will be executed on certain events
    A typical event is someone trying to access a port on the server
    Node.js files must be initiated on the server before having any effect
    Node.js files have extension ".js"

14. What is cli?
Ans: A CLI (command line interface) is a user interface to a computer's operating system or an application in which the user responds to      a visual prompt by typing in a command on a specified line, receives a response back from the system, and then enters another            command, and so forth.

15. What is AOT Compiler?
Ans: The Angular Ahead-of-Time (AOT) compiler converts your Angular HTML and TypeScript code into efficient JavaScript code during the        build phase before the browser downloads and runs that code. This guide explains how to build with the AOT compiler using different      compiler options and how to write Angular metadata.

16. What is Component?
Ans: Component is consists of three building blocks:
               a. Template (HTML = view)
               b. Class (Code - Typescript = Method & Property)
               c. Metadata (Information = Decorator)
17. What is difference between let and var?
Ans: let allows you to declare variables that are limited in scope to the block, statement, or expression on which it is used. This is
     unlike the var keyword, which defines a variable globally, or locally to an entire function regardless of block 

18. What is karma.conf.js?
Ans: Testing Purpose

19. Why one should use ng serve and npm start? or What is difference between ng serve and npm start?
Ans: ng serve directly open your application file in browser without folllowing any explorer. But in npm start this not happen, it can only be allowed to allocate the a locallhost server for ready to use your application file. 

20. What is template?
Ans: It is technically HTML. But with template you only can define your internal tag reference.
     template: `
                 <h1>
                 Hello {{Name}}
                 </h1>
                `
21. How can you call your template through class?
Ans: selector: '.app-FirstPage'

22. How can you call your template throug attribute?
Ans: selector: '[app-FirstPage]'

23. What is selector?
Ans: You can create your custom HTML tag.
     selector: 'app-FirstPage'

24. What is templateUrl?
Ans: You can referred external component's html/template.
     templateUrl: './test/test.component.html'

25. What is styles? or What is the role of "styles" in AJS 5?
Ans: This is part of Component Decorator. We can insert our internal styles.
     styles: [`
               h1{color:red;}
               `]

26. What is styleUrls?
Ans: To attach the external component's css.
     styleUrls: './test/test.component.css'
Ans: This is part of Component Decorator. Through which we can reference our individual component's css (i.e external css)

27. What is SPA?
Ans: SPA stands for Single Page Application, but we can control the multiple pages as accordingly the use of particular one when that one is needed. Hence all HTML pages are not loaded. This beacuse our application increases its performance.

28. What is never data type?
Ans: The never type represents the type of values that never occur. [Need to see example online]

29. What is interpolation?
Ans: It is nothing, but just html data binding.
    Syntax: {{Name}}

30. Where you can build up your global style of component?
Ans: main.css

31. What is use of # in Angular JS 5?
Ans: For template reference variable

32. Why is used package.json in AJS 5?
Ans: It contains all dependencies.

33. What is property data binding?
Ans: When interpolation fail to bind the no string data then we can use property data binding.
     template:
     `<input type="text" value="Manas" [disabled]="{{false}}">
     <input type="text" value="Manas" ng-disabled="{{false}}">
     <input type="text" value="Manas" ng-disabled="isDisabled">
     `
     export class testComponent{
     public isDisabled = 'false';
     }
     
34. What is webpacks?
Ans: Mainly bundle your scripts, images, styles, assets. [https://webpack.js.org/]
     In short Webpack is a module bundler. It takes in a bunch of assets (ie. source, images, markup, CSS, ...) and turns
     that into something you can provide to the client. As it happens this is the fundamental problem of web development at
     the moment...

35. What is difference between html attributes and dom property?
Ans: html attribute are initialize the value and the attribute value cannot be changed, but dom property denotes the current value and this value can be changed

36. Find some differences between  HTML attribute and DOM property?
Ans: 
     a. Attributes are defined by HTML and properties are defined by DOM.
     b. The responsibility of HTML attributes is just to initialize DOM properties.  And then later DOM properties can change but HTML           attributes cannot. 
     c. There are some HTML attributes that have corresponding DOM property  and those DOM properties have corresponding HTML attributes         such as id.
     d.  There are also some HTML attributes that do not have corresponding DOM property such as colspan.
     e. There are also some DOM properties that do not have corresponding HTML attributes such as textContent.
     f. The HTML attribute value contains initial value where as DOM property value contains current value.

37. What is @input and @output?
Ans: @Input decorator is used to send data from parent to child.
     @Output component is used to send data from child to parent.

38. What is attribute binding?

39. What is limitation of interpolation?
Ans: We cannot bind the no string data through interpolation. (Note: For that we use property data binding)
    example: a. No string support
             <input type="text" [disabled]="{{true}}" value="Manas">
             <input type="text" ng-disabled="isDasable" value="Manas">
             b. We can not assign an expression to a variable i.e {{a=2+2}}. In console you can see "Template parse errors:" [It does                   not render your html page]
             c. Can not access global/window variable i.e {{window.location.href}} but you can assing this in class variable 
                  siteUrl:string = window.location.href; and then call <div>{{siteUrl}}

40. What is the synatx of property binding?
Ans: bind-id="myId", [id]="myId"
     public myId = 'test';

41. Write the single class binding syntax?
Ans: [class]="text-red"
     public text-red = 'text-red'

42. Write the correct syntax for condition based class bindind?
Ans: [class.text-red="hasError"]
     public hasError = true;

43. Write the correct syntax for multiple class attachment?
Ans: [ngClass]="multiClass"

     public textRed = 'text-red';
     public textGreen = 'text-green';
     public textItalic = "text-italic";
     public textBold = "text-bold";
     public hasError = false;
     public hasStyle = true;
     public multiClass = {
                         'text-green': this.hasError,
                         'text-italic': this.hasStyle,
                         'text-red': this.hasStyle,
                         'text-bold': this.hasStyle,
                         
     }
     
44. What is style binding?
Ans: This is class to view data binding - one way data binding. We can bind css styles as normally, conditionally and multiple class attachments.

45. Write all the style binding syntaxes?
Ans: [style.color]="'red'", [style.color]="hasColor ? 'red':'green'", [style.color]="textRed", [ngStyle]="multiStyle"

46. What is event binding?
Ans: Event binding is also one way data binding but its flow is from template to class.
     We can bind this different ways:
     1. (click)="Demo()"    ---- external calling
     2. (click)="Demo($event)" ----- event listener
     3. (click)="Demo='Welcome Manas!!'"  ---- internal calling

47. What is template reference variable? And which characcter is used for this?
Ans: This is like a reference call out type of work. We can refer out input through event handler and get the value by passing same          reference in class. # characcter is used for template reference variable.
     <input type="text" #myInput /> with <button (click)="Demo(myInput.value)">Login</button>
     
48. What is two way data binding?
Ans: This is actually combination of property binding and event binding means the data flow from template to class i.e. [] and class to      template i.e (). The synax is [(ngModel)]="Name" is called Banana.

49. What is the resolution of "template parse error" when we perform two way data binding?
Ans: Attach FormsMudule to app.mudule.ts and also attach it to import array 

50. What are the structural directives?
Ans: The structural directive are add or remove html elements from dom. There are three types of structural directives in angular js 5.
     1. ngIf
     2. ngSwitch
     3. ngFor

51. Write the different syntaxes of ngIf direcctive?
Ans: *ngIf="false", *ngIf="true", *ngIf="show", *ngIf="show;then thenBlock;else elseBlock", 

52. How can you bind the then block and else block in html?
Ans: <h1 *ngIf="show;then thenBlock;else elseBlock">Any Content</h1>
    <ng-template #thenBlock>
        <h1>thenBlock Content</h1>
    </ng-template>
    <ng-template #elseBlock>
        <h1>elseBlock Content</h1>
    </ng-template>

53. Write an application for onclick show or hide elements from dom with help of ngIf?
Ans: <p>name: <input type="text" #name /></p>
     <p *ngIf="showHide">phone: <input type="text" #phone /></p>
     <p>address: <input type="text" #address /></p>
     <p *ngIf="showHide">password: <input type="text" #password /></p>
     <button (click)="saveChange()">{{showHide?"Hide":"Show"}} Details</button>

54. What is ngSwitch?
Ans: ngSwitch is tested the multiple case statements as usual in other programming languages.
     syntax: [ngSwitch]="favColor" with *ngSwitchCase="case_1", *ngSwitchCase="case_2", *ngSwitchCase="case_3",  *ngSwitchDefault

55. What is use of ngFor?
Ans: ngFor Directive ---- accessing list of html elements
    syntaxes: 
    1. *ngFor="let player of players" binding with {{player}} --- all player list
    2. *ngFor="let player of players;index as i" adding index value {{i}} {{player}} --- index value with all player list
    3. *ngFor="let player of players;first as f" binding with fisrt list true {{f}} {{player}} --- fisrt player list true/other false
    4. *ngFor="let player of players;last as l" binding with last list true {{l}} {{player}} --- last player list true/other false
    5. *ngFor="let player of players;odd as o" binding with old list true {{o}} {{player}} --- odd player list true/other false
    6. *ngFor="let player of players;even as e" binding with even list true {{e}} {{player}} --- even player list true/other false

56. What is directive?
Ans: By this point you should be able to create your own custom component as well as use a set of built-in Angular directives.
     But you might be surprised to hear that you’ve already created a custom directive. That’s because Components are Directives.
     
57. What is template driven form? Describe in detail.
Ans: When we create a form in .html file this is called template driven form. This is, you can send data from component to view.
     Steps to startup of template driven form: 
     1. import {FormsMudule} from '@angular/forms'
     2. use of
          ngModel (internally replaced to ngFormControl tag to access form properties)
          #myForm="ngForm" - ngForm (internally replaced to form tag)
     3.   (ngSubmit)="SaveForm(myForm.value)" or <button (click)="CancelForm()">Save</button> - (ngSubmit) used for post form

58. Give an example of Template Driven Form?
Ans: 
     tdf.component.html
     ----------------

     <div class="container">
         <div class="well-sm bg-primary">Class 17: Template Driven Form</div>
         <form #myForm="ngForm" (ngSubmit)="SaveForm(myForm.value)"
             class="form-inline">

     <div ngModelGroup="fullName">
             <div>
                 <label>First Name: </label>
                 <input class="form-control"
                 type="text" name="firstName" ngModel/>
             </div>

             <div>
                 <label>Last Name: </label>
                 <input class="form-control"
                 type="text" name="lastName" ngModel/>
             </div>
     </div>

             <div>
                 <label>Email: </label>
                 <input class="form-control"
                 type="text" name="Email" ngModel/>
             </div>

             <div>
                 <label>Address: </label>
                 <input class="form-control"
                 type="text" name="Address" ngModel/>
             </div>

             <button class="btn btn-primary">Save</button>
             <button class="btn btn-primary" (click)="CancelForm()">Cancel</button>
         </form>
     <br>
     <br>
     <br>
     <br>
     <br>

     </div>

tdf.component.ts
----------------
     import { Component } from '@angular/core';

     @Component({
         selector:'template-driven-form',
         templateUrl:'tdf.component.html'
     })


     export class tdfComponent{
     SaveForm(value:any){
     console.log(value.fullName.firstName);
     console.log(value.fullName.lastName);
     console.log(value.Email);
     console.log(value.Address);
         }
     CancelForm(){

     }

     }
     
59. Write down angular assets used in template driven form?
Ans: FormsModel, #myForm, ngForm, (ngSubmit), SaveForm(myForm.value), ngModel, ngModelGroup

59. What is model driven form?
Ans: We create the form and form properties in typescript instead of html. This is, tow way binding means view-to-component and
     component-to-view.
     
60.  What are assets and steps used for model driven form in angular js? Describes in detail.  
Ans: Steps
     1. import {FormGroup,FormControl} from "@angular/forms"; -- FormGroup-for form creation/assign and FormControl-creation/assign form            elements/properties in modeldriven.component.ts file
     2. import {OnInit} from "@angular/core"; --OnInit is an interface which is used for form assignment in angular js (in used file             "modeldriven.component.ts")
     3. import {FormsModule,ReactiveFormsModule} from '@angular/forms'; FormsModule for form assignment/task pick from html and                           ReactiveFormsModule for from assignment/task pick from .ts file (used file in app.component.ts)
     4. imports: [FormsModule,ReactiveFormsModule] used file in app.component.ts
     5. in modeldriven.component.ts
               export class ModelDrivenComponent implements OnInit{
    stuRegForm : FormGroup;
    ngOnInit(){
        this.stuRegForm = new FormGroup({

            firstName : new FormControl(),
            lastName : new FormControl(),
            email : new FormControl(),
            Address : new FormControl()
        })
      } 
    }
    6. modeldrivev.component.html
        <form [formGroup]="stuRegForm">
            <label>Name</label>
            <input type="text" formControlName= "firstName"/>
            <label>Last Name</label>
            <input type="text" formControlName= "lastName"/>
            <label>Email</label>
            <input type="text" formControlName= "email"/>
            <label>Address</label>
            <input type="text" formControlName= "Address"/>
        <button class="btn btn-primary">Save </button>imports: FormsModule                               
    </form>
        {{stuRegForm.value | json}}

61. What are differences between template driven form and model driven form?
Ans: 
     template driven form                                   model driven form
     ----------------------------                           --------------------------------
     1. import { FormsModule } from '@angular/forms';       1. import { ReactiveFormsModule } from '@angular/forms';
          in app.component.ts                                    in app.component.ts
     2. imports: FormsModule                                2. imports: ReactiveFormsModule
     3. send data from component/class to view              3. send data from component to view and vice-versa
          i.e. one way data binding                              i.e. two way data binding
     4. this is written in html                             4. this is performs in typescript

62. What is ngForm?
Ans: It is an angular directive which directs to bind the form of html, for example we can bind the form through
     template reference variable such as #myForm="ngForm"
     
63. What is ngSubmit?
Ans: (ngSubmit) is an angular directive which helps to submit the form data. <form #myForm="ngForm" 

64. What is ngModel?
Ans: ngModel is an angular directive which hepls to control/access the every form elements.
     <input class="form-control" type="text" name="firstName" ngModel/>
65. What is ngModelGroup?
Ans: ngModelGroup is an angular directive which hepls to bind the multiple form elements to binding in one.
     <div ngModelGroup="fullName">
        <div>
            <label>First Name: </label>
            <input class="form-control" type="text" name="firstName" ngModel/>
        </div>

        <div>
            <label>Last Name: </label>
            <input class="form-control"
            type="text" name="lastName" ngModel/>
        </div>
     </div>
     
66. What is OnInit?
Ans: This is a module of angular which hepls to implement the ngOnInit interface
     export class modeldrivenComponent implements OnInit {
               ngOnInit(){
               }
           }
67. What is ngOnInit?
Ans: It is an interface which helps to define your own document properties and methods

68. What is FormGroup?
And: FormGroup is an angular module which hepls to create your own form in typescript file. And this is follows when model driven form        created.

69. What is FormControl?
Ans: FormGroup is an angular module through which we can assing/create our new form properties/elements.
 
70. What is Component Interaction?
Ans: To transfer data parent component to child component and child component to parent component.

71.  What is @Input or custom property? How do you build this? And How it works?
Ans: When we send data from parent component to child component we need tu use @Input decorator.
     step 1: name:string = "Manas"; in app.component.ts (parent)
     step 2: bind the above value to template: `<product [parentData]="name"></product>`
     step 3: @Input() public parentData; declare within class
     step 4: {{parentData}} bind into the child template
      
72. What is @Output or custom event? How do you build this?
Ans: When we send data from child component to parent component we need tu use @Uutput decorator.

73. What is EventEmitter()?
Ans: Through EventEmitter() we can assign/create an Event in child component which we can referred to the parent component.

74. What is emit()?
Ans: We can emit/raise the EventEmitter() for sending data from child to component.

75. What is the difference between ngOnInit and Constructor?
Ans: 

76. How do you define array in Angular js 5?
Ans: employees:any[] = [
     {id:1,name:'Manas'},
     {id:2,name:'Ashish'},
     {id:3,name:'Ramesh'},
     ]
     
77. How do you access the above array?
Ans: <div *ngFor="{let employee of employees}">
          <div>Emp {{employee.id}}. {{employee.name}}</div>
     </div>

78. Describe about the angular hero?

79. How can you filter data from array? Use above arrow.
Ans: Search(value){
     if(this.value==''){
     this.employess = [
     {id:1,name:'Manas'},
     {id:2,name:'Ashish'},
     {id:3,name:'Ramesh'},
     ];
     }
     else{
     this.employees = this.employees.filter(ex=>ex.name.startsWith(value));
     }
     }

80. What is Lambda (=>)?
Ans: Lambda is just like argument to store the array values.
   
81. What is pipe?
Ans: Pipe is the process to show your data in different transformations.

82. Write down the different types of pipes?
Ans: import {Component} from "@angular/core";


     @Component({
         selector : "pip",
         template: `<div>Pipes examples</div><br>
         String Pipes : <br>
         1. uppercase = {{name | uppercase}}<br>
         2. loercase = {{name | lowercase}}<br>
         3. slice = {{name | slice : '3'}} <br>
         4. slice = {{name | slice : '3' : '5'}} <br>

         <h2>decimal Pipe </h2>
         {{salary | number:'1.2'}}<br>
         {{salary | number:'3.2'}}<br>
         {{salary | number:'3.2-2'}}<br>

         <h2>Date pipe </h2>
          {{da}}<br>
          {{da | date: 'fullDate'}}<br>
          {{da | date: 'shortDate'}}<br>
          {{da | date: 'fullDate'}}<br>
          {{da | date: 'dd/MM/yy'}}<br>


          <h2>Currency pipe </h2>
           {{salary | currency:'â‚¹'}}<br>
           {{salary | currency:'USD'}}<br>
           {{salary | currency:'USD':false}}<br>
           {{salary | currency:'CAD':'symbol-narrow'}}<br>
           {{salary | currency:'CAD':'code'}}<br>

            <h2>Json pipe </h2>
             {{student}}<br>
             {{student | json}}<br>

           <h2>Percent pipe </h2>
           {{salary | percent}}<br>

           <h2>Custom pipe </h2>
           {{name |trim}}
         `

     })

     export class PipeComponent
     {
         name:string = "vijay Rana";
         salary:number =  60.567;
         da = new Date();
         student:any = {name:"Vijay",Email:'vijayrana1091@gmail.com'}
     }

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
82. What is custom pipe? Or How will you create your custom pipe?
Ans: test.pipe.ts
     import {Pipe,PipeTransform} from "@angular/core";
     @Pipe({
         name: "Vijay"
     })
     export class TestPipe implements PipeTransform
     {
     }

83. Which component is used to import for validation is angular?
Ans: import { Validators } from '@angular/forms';

84. What are the different validation properties?
Ans: dirty and pristine, touched and untouched, valid and invalid and errors

85. What is meant for dirty validation?
Ans: dirty show true if the form property value is not changed when page loading

86. What is meant for pristine validation?
Ans: pristine show true if the form property value changed

86. What is meant for touch validation?
Ans: touch show true if you are blurOut from the current form element

87. What is meant for untouch validation?
Ans: untouch show true if you are focusIn in the current form element

88. What is meant for valid validation?
Ans: valid show true if you have putted valid property

89. What is meant for invalid validation?
Ans: invalid show true if you don't have putted valid property

89. What is meant for errors validation?


https://toddmotto.com/angular/
