Component Interaction

@Input -- how build custom property 
@Output -- how build custom event
@Input() decorator
@Output() decorator
@EventEmitter  - - for event raise



panert to child -- @Input()
child to parent -- @Output [use @EventEmitter]



read - main.ts and vendor.js

publisher subscribe module - design pattern



test.component.ts
import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
    selector:'app-test',
    template:`Child Component: Data from Parent - {{Name}}<br><br>
    <button (click)="fireEvent()">Send Event</button>
    
    `,
    
})

export class testComponent{

    //@Input() public parentData;
    @Input('parentData') public Name;
    @Output() public childEvent = new EventEmitter();

    fireEvent(){
        this.childEvent.emit('Codevolutiin!!');
    }

}


app.component.html
<div>Parent Data: Data From Child Component - {{message}}</div>

<app-test (childEvent)="message=$event" [parentData]="Name"></app-test>


import { Component } from '@angular/core';



@Component({

	selector: 'app-root',

	templateUrl: './app.component.html',

	styleUrls: ['./app.component.css']
})


export class AppComponent
{

title = 'app';
Name: string = "Manas";

message: string ="";


}


